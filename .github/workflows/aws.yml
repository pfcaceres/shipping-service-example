name: Deploy to Amazon ECS

on:   
  push:
    branches: [ "main, stage, develop" ]
  pull_request:
    branches: [ "main, stage, develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  AWS_REGION: us-east-1                                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: dev-repository                         # set this to your Amazon ECR repository name
  ECS_SERVICE: dev-shipping-service                       # set this to your Amazon ECS service name
  ECS_CLUSTER: dev-cluster                                # set this to your Amazon ECS cluster name
  CONTAINER_NAME: ms-shipping-service                 # set this to the name of the container in the containerDefinitions section of your task definition
  
  
permissions:
  contents: read

jobs:    
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: develop

    steps:    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: GetDate
      id: date
      run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        
    - name: Retag image
      id: retag-img 
      uses: abronin/ecr-retag-action@v1
      env:
        IMAGE_TAG: ${{env.CONTAINER_NAME}}-latest
      with:
          repository: ${{ env.ECR_REPOSITORY }}
          tag: ${{ env.IMAGE_TAG }}
          new-tags: ${{ env.IMAGE_TAG }}-${{ env.date }}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # IMAGE_TAG: ${{ github.sha }}
        IMAGE_TAG: ${{env.CONTAINER_NAME}}-latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Get task definition
      run: |
        aws ecs describe-task-definition --task-definition dev-${{ env.CONTAINER_NAME}}-td --output json --query taskDefinition > task-definition.json
                
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
